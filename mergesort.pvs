%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Grupo de Teoria da Computacao, Universidade de Brasilia
%%% Thiago M.F. Ramos, Ariane A. Almeida & 
%%% Ana C. R. Oliveira Valverde & M. Ayala-Rincon
%%% Last modification:  September 25, 2013
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

mergesort : THEORY

BEGIN

IMPORTING sorting
IMPORTING complexity
IMPORTING lnexp_fnd@ln_exp


l,l1,l2 : VAR list[nat]

% Merging (sorted lists)

merge(l1, l2 : list[nat]) : RECURSIVE list[nat] =
IF null?(l1) OR null?(l2) THEN append(l1, l2)
ELSIF car(l1) <= car(l2) THEN cons(car(l1), merge(cdr(l1),l2))
ELSE cons(car(l2), merge(l1, cdr(l2)))
ENDIF
MEASURE length(l1) + length(l2)

%%%%%%% merge_sort, the main function, sorts a list recursively 
%%%%%%% using the function merge.
merge_sort(l) : RECURSIVE list[nat] =
 IF length(l) <= 1 THEN l 
 ELSE merge(merge_sort(prefix(l,floor(length(l) / 2))), 
                 merge_sort(suffix(l,floor(length(l)/2))))
 ENDIF 
MEASURE length(l)

%cmerge (x:nat, lc:[list[nat],nat]): RECURSIVE [list[nat],nat] =
	%IF null?(lc`1) THEN (cons(x,lc`1),lc`2)
	%ELSIF x <= car(lc`1) THEN (cons(x,lc`1), lc`2 + 1) 
	%ELSE LET lcaux = cmerge(x,(cdr(lc`1),lc`2)) IN
	%(cons(car(lc`1), lcaux`1), lcaux`2 + 1)
%ENDIF 
%MEASURE length(lc`1)

cmerge(x:nat, lc1:[list[nat], nat], lc2:[list[nat], nat]) : RECURSIVE [list[nat], nat] =
IF null?(lc1`1) OR null?(lc2`1) THEN (append(lc1`1, lc2`1), lc1`2)
ELSIF car(lc1`1) <= car(lc2`1) THEN (cons(car(lc1`1), merge(cdr(lc1`1),lc2`1)), lc1`2 + lc2`2 + 1)
ELSE (cons(car(lc2`1), merge(lc1`1, cdr(lc2`1))), lc1`2 + lc2`2 + 1)
ENDIF
MEASURE length(lc1`1) + length(lc2`1)

cmerge_sort(l: list[nat]) : RECURSIVE [list[nat], nat] =
 IF length(l) <= 1 THEN (l,0)
 ELSE cmerge(car(l), cmerge_sort(prefix(l,floor(length(l) / 2))), 
                 cmerge_sort(suffix(l,floor(length(l)/2))))
 ENDIF 
MEASURE length(l)

count_cmerge_sort_ws_general: LEMMA
		  FORALL (l:list[nat]): cmerge_sort(l)`2 <= (length(l) * (length(l) - 1))/2

count_cmerge_sort_ws_general_nlogn: LEMMA
		  FORALL (l:list[nat]): cmerge_sort(l)`2 <= (length(l) * (ln(length(l)) + 1))

nlog_n_less_than_3nlogn: LEMMA
		  FORALL (x: nat): (x * (ln(x) + 1)) <= 3 * (x * ln(x))

merge_sort_is_quadratic: LEMMA
 FORALL (l:list[nat]):
 member(LAMBDA(n:nat): cmerge_sort(l)`2,
 Omicron(LAMBDA(n:nat):length(l)^2 ))

merge_sort_is_nlogn: LEMMA % mostrar que merge sort Ã© n log n
 FORALL (l:list[nat]):
 member(LAMBDA(n:nat): cmerge_sort(l)`2,
 Omicron(LAMBDA(n:nat):length(l) * ln(length(l))))
 
end mergesort

