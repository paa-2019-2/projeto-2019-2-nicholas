(mergesort
 (merge_TCC1 0
  (merge_TCC1-1 nil 3783352151 ("" (subtype-tcc) nil nil) nil nil))
 (merge_TCC2 0
  (merge_TCC2-1 nil 3783352151 ("" (subtype-tcc) nil nil) nil nil))
 (merge_TCC3 0
  (merge_TCC3-1 nil 3783352151 ("" (termination-tcc) nil nil) nil nil))
 (merge_TCC4 0
  (merge_TCC4-1 nil 3783352151 ("" (termination-tcc) nil nil) nil nil))
 (merge_sort_TCC1 0
  (merge_sort_TCC1-1 nil 3783352151 ("" (subtype-tcc) nil nil) nil
   nil))
 (merge_sort_TCC2 0
  (merge_sort_TCC2-1 nil 3783352151 ("" (termination-tcc) nil nil) nil
   nil))
 (merge_sort_TCC3 0
  (merge_sort_TCC3-1 nil 3783352151 ("" (termination-tcc) nil nil) nil
   nil))
 (cmerge_TCC1 0
  (cmerge_TCC1-1 nil 3783352151 ("" (subtype-tcc) nil nil) nil nil))
 (cmerge_TCC2 0
  (cmerge_TCC2-1 nil 3783352151 ("" (subtype-tcc) nil nil) nil nil))
 (cmerge_sort_TCC1 0
  (cmerge_sort_TCC1-1 nil 3783352151 ("" (subtype-tcc) nil nil) nil
   nil))
 (count_cmerge_sort_ws_general_nlogn_TCC1 0
  (count_cmerge_sort_ws_general_nlogn_TCC1-1 nil 3783371396
   ("" (subtype-tcc) nil nil) nil nil))
 (count_cmerge_sort_ws_general_nlogn 0
  (count_cmerge_sort_ws_general_nlogn-1 nil 3784282477
   ("" (induct "l")
    (("1" (expand "cmerge_sort")
      (("1" (lift-if)
        (("1" (prop) (("1" (grind) nil nil) ("2" (grind) nil nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (expand "cmerge_sort" 1)
        (("2" (lift-if)
          (("2" (prop) (("1" (grind) nil nil) ("2" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (postpone) nil nil))
    nil)
   nil shostak))
 (nlog_n_less_than_3nlogn_TCC1 0
  (nlog_n_less_than_3nlogn_TCC1-1 nil 3783373673
   ("" (subtype-tcc) nil nil) nil nil))
 (merge_sort_is_quadratic_TCC1 0
  (merge_sort_is_quadratic_TCC1-1 nil 3783352151
   ("" (subtype-tcc) nil nil) nil nil))
 (merge_sort_is_quadratic 0
  (merge_sort_is_quadratic-1 nil 3783352153
   ("" (expand "member")
    (("" (expand "Omicron")
      (("" (skeep)
        (("" (lemma "count_cmerge_sort_ws_general")
          (("" (inst -1 "l")
            (("" (lemma "le_cut")
              ((""
                (inst -1 "cmerge_sort(l)`2"
                 "(length(l) * (length(l) - 1)) / 2"
                 "2 * length(l) ^ 2")
                (("" (split)
                  (("1" (assert)
                    (("1" (hide -2) (("1" (grind) nil nil)) nil)) nil)
                   ("2" (propax) nil nil)
                   ("3" (hide -1 2) (("3" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cmerge_sort def-decl "[list[nat], nat]" mergesort nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (le_cut formula-decl nil extra_real_props nil)
    (count_cmerge_sort_ws_general formula-decl nil mergesort nil)
    (Omicron const-decl "setof[[nat -> nonneg_real]]" complexity nil)
    (nat_exp application-judgement "nat" exponentiation nil))
   shostak))
 (merge_sort_is_nlogn_TCC1 0
  (merge_sort_is_nlogn_TCC1-1 nil 3783371396 ("" (subtype-tcc) nil nil)
   nil nil))
 (merge_sort_is_nlogn 0
  (merge_sort_is_nlogn-1 nil 3783371532
   ("" (expand "member")
    (("" (expand "Omicron")
      (("" (skeep)
        (("" (lemma "count_cmerge_sort_ws_general_nlogn")
          (("" (inst -1 "l")
            (("" (lemma "le_cut")
              ((""
                (inst -1 "cmerge_sort(l)`2"
                 "(length(l) * (ln(length(l)) + 1))"
                 "3 * (length(l) * ln(length(l)))")
                (("" (split)
                  (("1" (hide -2) (("1" (grind) nil nil)) nil)
                   ("2" (propax) nil nil)
                   ("3" (lemma "nlog_n_less_than_3nlogn")
                    (("3" (inst -1 "length(l)") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cmerge_sort def-decl "[list[nat], nat]" mergesort nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ln const-decl "real" ln_exp "lnexp_fnd/")
    (nlog_n_less_than_3nlogn formula-decl nil mergesort nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (suffix def-decl "list[nat]" sorting nil)
    (prefix def-decl "list[nat]" sorting nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Integral const-decl "real" integral_def "analysis/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (le_cut formula-decl nil extra_real_props nil)
    (count_cmerge_sort_ws_general_nlogn formula-decl nil mergesort nil)
    (Omicron const-decl "setof[[nat -> nonneg_real]]" complexity nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak)))

